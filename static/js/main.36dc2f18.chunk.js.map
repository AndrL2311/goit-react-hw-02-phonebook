{"version":3,"sources":["App.module.css","components/Form/Form.jsx","components/Filter/Filter.jsx","components/Contacts/Contacts.jsx","App.jsx","index.js"],"names":["module","exports","Form","state","name","number","nameInputId","uuidv4","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","s","container","htmlFor","type","id","onChange","pattern","title","required","button","React","Component","Filter","Contacts","contacts","onDeleteContact","statistics","map","contact","label","onClick","App","filter","formSubmitHandler","data","find","alert","prevState","deleteContact","contactId","changeFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36dc2f18.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport s from './Form.module.css';\n\nclass Form extends React.Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    // Проп который передается форме для вызова при сабмите\n    // this.state.contacts.push({\n    //   id: uuidv4(),\n    //   name: this.state.name,\n    //   number: this.state.number,\n    // });\n    this.props.onSubmit(this.state);\n    // Сбрасываем имя и номер\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <div className={s.container}>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor={this.nameInputId}>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              id={this.nameInputId}\n              value={name}\n              onChange={this.handleChange}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n          <label htmlFor={this.numberInputId}>\n            Number\n            <input\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              id={this.numberInputId}\n              onChange={this.handleChange}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </label>\n          <button className={s.button} type=\"submit\">\n            Add Contact\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","// import s from './Filter.module.css';\n\nfunction Filter({ value, onChange }) {\n  return (\n    <label>\n      Find contacts by name{' '}\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  );\n}\n\nexport default Filter;\n","import s from './Contacts.module.css';\n\nfunction Contacts({ contacts, onDeleteContact }) {\n  return (\n    <>\n      <ul className={s.statistics}>\n        {contacts.map(contact => (\n          <li className=\"item\" key={contact.id}>\n            <span className={s.label}>{contact.name}</span>\n            <span className={s.value}>{contact.number}</span>\n            <button\n              className={s.button}\n              type=\"button\"\n              onClick={() => onDeleteContact(contact.id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nexport default Contacts;\n\n//   contacts.length > 0 && contacts.map(contact => console.log(contact.id));}\n// (<li className=\"item\">\n//         <span className={s.label}>Name</span>\n//             <span className={s.value}>Number</span>\n//             <button\n//           className={s.button}\n//           type=\"button\"\n//         //   onClick={onLeaveFeedback}\n//         >Delete</button>\n//         </li>\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport s from './App.module.css';\nimport Form from './components/Form/Form';\nimport Filter from './components/Filter/Filter';\nimport Contacts from './components/Contacts/Contacts';\n\nclass App extends React.Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  formSubmitHandler = data => {\n    if (this.state.contacts.find(contact => contact.name === data.name)) {\n      return alert(`${data.name} is alredy in contacts`);\n    } else {\n      data.id = uuidv4();\n      this.setState(prevState => {\n        // console.log(prevState.contacts); // будет разный на каждой итерации\n        // Добавляем в масив новый объект\n        return { contacts: [...prevState.contacts, data] };\n      });\n    }\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  changeFilter = event => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div className={s.container}>\n        <h1>Phonebook</h1>\n        <Form onSubmit={this.formSubmitHandler} />\n        <h2>Contacts</h2>\n        <Filter value={this.state.filter} onChange={this.changeFilter} />\n        <Contacts\n          contacts={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n// ============================================\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}